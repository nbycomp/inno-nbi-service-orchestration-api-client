# coding: utf-8

"""
    NBI Service Orchestration API

    Provides a robust interface for orchestrating service chains across cloud and edge computing environments, facilitating deployment, management, and updates of service chains to ensure dynamic, efficient operations across diverse infrastructure setups.

    The version of the OpenAPI document: 1.0.0
    Contact: support@nearbycomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest
from inno_nbi_api.models.site import Site

class TestSite(unittest.TestCase):
    """Site unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Site:
        """Test Site
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        if include_optional:
            return Site(
                id='site1',
                display_name='Test Site',
                description='A test site',
                ancestors=['ancestor1'],
                sites=['site2'],
                devices=['device1'],
                org='org1'
            )
        else:
            return Site(
                id='site1',
                display_name='Test Site',
                org='org1'
            )

    def testSite_required_only(self):
        """Test Site with only required params"""
        inst_req_only = self.make_instance(include_optional=False)
        self.assertIsInstance(inst_req_only, Site)
        self.assertEqual(inst_req_only.id, 'site1')
        self.assertEqual(inst_req_only.display_name, 'Test Site')
        self.assertEqual(inst_req_only.org, 'org1')
        self.assertIsNone(inst_req_only.description)
        self.assertIsNone(inst_req_only.ancestors)
        self.assertIsNone(inst_req_only.sites)
        self.assertIsNone(inst_req_only.devices)

    def testSite_required_and_optional(self):
        """Test Site with required and optional params"""
        inst_req_and_optional = self.make_instance(include_optional=True)
        self.assertIsInstance(inst_req_and_optional, Site)
        self.assertEqual(inst_req_and_optional.id, 'site1')
        self.assertEqual(inst_req_and_optional.display_name, 'Test Site')
        self.assertEqual(inst_req_and_optional.description, 'A test site')
        self.assertEqual(inst_req_and_optional.ancestors, ['ancestor1'])
        self.assertEqual(inst_req_and_optional.sites, ['site2'])
        self.assertEqual(inst_req_and_optional.devices, ['device1'])
        self.assertEqual(inst_req_and_optional.org, 'org1')

if __name__ == '__main__':
    unittest.main()
