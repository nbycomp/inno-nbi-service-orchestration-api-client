# coding: utf-8

"""
    NBI Service Orchestration API

    Provides a robust interface for orchestrating service chains across cloud and edge computing environments, facilitating deployment, management, and updates of service chains to ensure dynamic, efficient operations across diverse infrastructure setups.

    The version of the OpenAPI document: 1.0.0
    Contact: support@nearbycomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import unittest
from inno_nbi_api.models.site_response import SiteResponse
from inno_nbi_api.models.site import Site

class TestSiteResponse(unittest.TestCase):
    """SiteResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SiteResponse:
        """Test SiteResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        if include_optional:
            return SiteResponse(
                site=Site(
                    id='site1',
                    display_name='Test Site',
                    description='A test site',
                    ancestors=['ancestor1'],
                    sites=['site2'],
                    devices=['device1'],
                    org='org1'
                )
            )
        else:
            return SiteResponse(
                site=Site(
                    id='site1',
                    display_name='Test Site',
                    org='org1'
                )
            )

    def testSiteResponse_required_only(self):
        """Test SiteResponse with only required params"""
        inst_req_only = self.make_instance(include_optional=False)
        self.assertIsInstance(inst_req_only, SiteResponse)
        self.assertIsInstance(inst_req_only.site, Site)
        self.assertEqual(inst_req_only.site.id, 'site1')
        self.assertEqual(inst_req_only.site.display_name, 'Test Site')
        self.assertEqual(inst_req_only.site.org, 'org1')
        self.assertIsNone(inst_req_only.site.description)
        self.assertIsNone(inst_req_only.site.ancestors)
        self.assertIsNone(inst_req_only.site.sites)
        self.assertIsNone(inst_req_only.site.devices)

    def testSiteResponse_required_and_optional(self):
        """Test SiteResponse with required and optional params"""
        inst_req_and_optional = self.make_instance(include_optional=True)
        self.assertIsInstance(inst_req_and_optional, SiteResponse)
        self.assertIsInstance(inst_req_and_optional.site, Site)
        self.assertEqual(inst_req_and_optional.site.id, 'site1')
        self.assertEqual(inst_req_and_optional.site.display_name, 'Test Site')
        self.assertEqual(inst_req_and_optional.site.description, 'A test site')
        self.assertEqual(inst_req_and_optional.site.ancestors, ['ancestor1'])
        self.assertEqual(inst_req_and_optional.site.sites, ['site2'])
        self.assertEqual(inst_req_and_optional.site.devices, ['device1'])
        self.assertEqual(inst_req_and_optional.site.org, 'org1')

if __name__ == '__main__':
    unittest.main()
