# coding: utf-8

"""
    NBI Service Orchestration API

    Provides a robust interface for orchestrating service chains across cloud and edge computing environments, facilitating deployment, management, and updates of service chains to ensure dynamic, efficient operations across diverse infrastructure setups.

    The version of the OpenAPI document: 1.0.0
    Contact: support@nearbycomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BlockArgsUpdate(BaseModel):
    """
    Defines either a new block to be added or an existing block to be updated within a service chain.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="ID of a previously-deployed block to update. Providing this parameter implies an update to an existing block; inputs with no ID will be treated as new blocks.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the block.", alias="displayName")
    block_chart_name: Optional[StrictStr] = Field(default=None, description="The name of the block chart associated with this block.", alias="blockChartName")
    block_chart_version: Optional[StrictStr] = Field(default=None, description="The version of the block chart to be used.", alias="blockChartVersion")
    values: Optional[StrictStr] = Field(default=None, description="A string of values necessary for configuring the block, typically in JSON or YAML format.")
    __properties: ClassVar[List[str]] = ["id", "displayName", "blockChartName", "blockChartVersion", "values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlockArgsUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlockArgsUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "displayName": obj.get("displayName"),
            "blockChartName": obj.get("blockChartName"),
            "blockChartVersion": obj.get("blockChartVersion"),
            "values": obj.get("values")
        })
        return _obj


